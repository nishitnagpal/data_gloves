
EG_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000008ca  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080011a  0080011a  00000978  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002318  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d94  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f55  00000000  00000000  00003bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081b  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014a8  00000000  00000000  000056b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea ec       	ldi	r30, 0xCA	; 202
  c0:	f8 e0       	ldi	r31, 0x08	; 8
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 31       	cpi	r26, 0x1A	; 26
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	aa e1       	ldi	r26, 0x1A	; 26
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a1 33       	cpi	r26, 0x31	; 49
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 90 03 	call	0x720	; 0x720 <main>
  e2:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <AVR_Init>:
{
	uint8_t rv;
	rv = SPI_Read_Byte(OBSERVE_TX);
	rv = rv & 0x0F;
	return rv;
}
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  f6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	51 9a       	sbi	0x0a, 1	; 10
  fe:	50 98       	cbi	0x0a, 0	; 10
 100:	3e 9a       	sbi	0x07, 6	; 7
 102:	3f 9a       	sbi	0x07, 7	; 7
 104:	54 9a       	sbi	0x0a, 4	; 10
 106:	56 9a       	sbi	0x0a, 6	; 10
 108:	57 9a       	sbi	0x0a, 7	; 10
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	46 98       	cbi	0x08, 6	; 8
 110:	47 9a       	sbi	0x08, 7	; 8
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	30 e7       	ldi	r19, 0x70	; 112
 116:	42 e0       	ldi	r20, 0x02	; 2
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	30 40       	sbci	r19, 0x00	; 0
 11c:	40 40       	sbci	r20, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <AVR_Init+0x2e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <AVR_Init+0x38>
 122:	00 00       	nop
 124:	46 9a       	sbi	0x08, 6	; 8
 126:	47 98       	cbi	0x08, 7	; 8
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	30 e7       	ldi	r19, 0x70	; 112
 12c:	42 e0       	ldi	r20, 0x02	; 2
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <AVR_Init+0x44>
 136:	00 c0       	rjmp	.+0      	; 0x138 <AVR_Init+0x4e>
 138:	00 00       	nop
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	41 f7       	brne	.-48     	; 0x10e <AVR_Init+0x24>
 13e:	46 98       	cbi	0x08, 6	; 8
 140:	47 98       	cbi	0x08, 7	; 8
 142:	8f e7       	ldi	r24, 0x7F	; 127
 144:	9f e4       	ldi	r25, 0x4F	; 79
 146:	22 e1       	ldi	r18, 0x12	; 18
 148:	81 50       	subi	r24, 0x01	; 1
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	20 40       	sbci	r18, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <AVR_Init+0x5e>
 150:	00 c0       	rjmp	.+0      	; 0x152 <AVR_Init+0x68>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <UART_Init>:
 156:	83 e3       	ldi	r24, 0x33	; 51
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 15e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 162:	e8 ec       	ldi	r30, 0xC8	; 200
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8d 7f       	andi	r24, 0xFD	; 253
 16a:	80 83       	st	Z, r24
 16c:	ea ec       	ldi	r30, 0xCA	; 202
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	86 60       	ori	r24, 0x06	; 6
 174:	80 83       	st	Z, r24
 176:	e9 ec       	ldi	r30, 0xC9	; 201
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 61       	ori	r24, 0x18	; 24
 17e:	80 83       	st	Z, r24
 180:	08 95       	ret

00000182 <UART_Tx>:
 182:	e8 ec       	ldi	r30, 0xC8	; 200
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	90 81       	ld	r25, Z
 188:	95 ff       	sbrs	r25, 5
 18a:	fd cf       	rjmp	.-6      	; 0x186 <UART_Tx+0x4>
 18c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 190:	08 95       	ret

00000192 <UART_Put_String>:
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	88 81       	ld	r24, Y
 19a:	88 23       	and	r24, r24
 19c:	31 f0       	breq	.+12     	; 0x1aa <UART_Put_String+0x18>
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Tx>
 1a4:	89 91       	ld	r24, Y+
 1a6:	81 11       	cpse	r24, r1
 1a8:	fb cf       	rjmp	.-10     	; 0x1a0 <UART_Put_String+0xe>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <BNO_MUX_Select>:
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	a1 f0       	breq	.+40     	; 0x1dc <BNO_MUX_Select+0x2c>
 1b4:	28 f4       	brcc	.+10     	; 0x1c0 <BNO_MUX_Select+0x10>
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	49 f0       	breq	.+18     	; 0x1cc <BNO_MUX_Select+0x1c>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <BNO_MUX_Select+0x24>
 1be:	1e c0       	rjmp	.+60     	; 0x1fc <BNO_MUX_Select+0x4c>
 1c0:	85 30       	cpi	r24, 0x05	; 5
 1c2:	a1 f0       	breq	.+40     	; 0x1ec <BNO_MUX_Select+0x3c>
 1c4:	78 f0       	brcs	.+30     	; 0x1e4 <BNO_MUX_Select+0x34>
 1c6:	86 30       	cpi	r24, 0x06	; 6
 1c8:	a9 f0       	breq	.+42     	; 0x1f4 <BNO_MUX_Select+0x44>
 1ca:	18 c0       	rjmp	.+48     	; 0x1fc <BNO_MUX_Select+0x4c>
 1cc:	5c 9a       	sbi	0x0b, 4	; 11
 1ce:	5e 98       	cbi	0x0b, 6	; 11
 1d0:	5f 9a       	sbi	0x0b, 7	; 11
 1d2:	08 95       	ret
 1d4:	5c 98       	cbi	0x0b, 4	; 11
 1d6:	5e 98       	cbi	0x0b, 6	; 11
 1d8:	5f 9a       	sbi	0x0b, 7	; 11
 1da:	08 95       	ret
 1dc:	5c 98       	cbi	0x0b, 4	; 11
 1de:	5e 9a       	sbi	0x0b, 6	; 11
 1e0:	5f 98       	cbi	0x0b, 7	; 11
 1e2:	08 95       	ret
 1e4:	5c 9a       	sbi	0x0b, 4	; 11
 1e6:	5e 98       	cbi	0x0b, 6	; 11
 1e8:	5f 98       	cbi	0x0b, 7	; 11
 1ea:	08 95       	ret
 1ec:	5c 98       	cbi	0x0b, 4	; 11
 1ee:	5e 98       	cbi	0x0b, 6	; 11
 1f0:	5f 98       	cbi	0x0b, 7	; 11
 1f2:	08 95       	ret
 1f4:	5c 9a       	sbi	0x0b, 4	; 11
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
 1f8:	5f 98       	cbi	0x0b, 7	; 11
 1fa:	08 95       	ret
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 c9 00 	call	0x192	; 0x192 <UART_Put_String>
 204:	08 95       	ret

00000206 <BNO_Init>:
 206:	cf 93       	push	r28
 208:	c1 e0       	ldi	r28, 0x01	; 1
 20a:	8c 2f       	mov	r24, r28
 20c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <BNO_MUX_Select>
 210:	80 e5       	ldi	r24, 0x50	; 80
 212:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_start_wait>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_write>
 21c:	81 e5       	ldi	r24, 0x51	; 81
 21e:	0e 94 2f 04 	call	0x85e	; 0x85e <i2c_rep_start>
 222:	0e 94 58 04 	call	0x8b0	; 0x8b0 <i2c_readNak>
 226:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Chip_ID>
 22a:	0e 94 32 04 	call	0x864	; 0x864 <i2c_stop>
 22e:	80 e5       	ldi	r24, 0x50	; 80
 230:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_start_wait>
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_write>
 23a:	80 e2       	ldi	r24, 0x20	; 32
 23c:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_write>
 240:	0e 94 32 04 	call	0x864	; 0x864 <i2c_stop>
 244:	2f e7       	ldi	r18, 0x7F	; 127
 246:	8f e4       	ldi	r24, 0x4F	; 79
 248:	92 e1       	ldi	r25, 0x12	; 18
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <BNO_Init+0x44>
 252:	00 c0       	rjmp	.+0      	; 0x254 <BNO_Init+0x4e>
 254:	00 00       	nop
 256:	80 e5       	ldi	r24, 0x50	; 80
 258:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_start_wait>
 25c:	8d e3       	ldi	r24, 0x3D	; 61
 25e:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_write>
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_write>
 268:	0e 94 32 04 	call	0x864	; 0x864 <i2c_stop>
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	80 e7       	ldi	r24, 0x70	; 112
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <BNO_Init+0x6c>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <BNO_Init+0x76>
 27c:	00 00       	nop
 27e:	cf 5f       	subi	r28, 0xFF	; 255
 280:	c7 30       	cpi	r28, 0x07	; 7
 282:	19 f6       	brne	.-122    	; 0x20a <BNO_Init+0x4>
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <BNO_Read_Quaternions>:
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	80 e5       	ldi	r24, 0x50	; 80
 28e:	0e 94 07 04 	call	0x80e	; 0x80e <i2c_start_wait>
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	0e 94 3b 04 	call	0x876	; 0x876 <i2c_write>
 298:	81 e5       	ldi	r24, 0x51	; 81
 29a:	0e 94 2f 04 	call	0x85e	; 0x85e <i2c_rep_start>
 29e:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2a2:	ca e1       	ldi	r28, 0x1A	; 26
 2a4:	d1 e0       	ldi	r29, 0x01	; 1
 2a6:	8a 83       	std	Y+2, r24	; 0x02
 2a8:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2ac:	8b 83       	std	Y+3, r24	; 0x03
 2ae:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2b2:	8c 83       	std	Y+4, r24	; 0x04
 2b4:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2b8:	8d 83       	std	Y+5, r24	; 0x05
 2ba:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2be:	8e 83       	std	Y+6, r24	; 0x06
 2c0:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2c4:	8f 83       	std	Y+7, r24	; 0x07
 2c6:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_readAck>
 2ca:	88 87       	std	Y+8, r24	; 0x08
 2cc:	0e 94 58 04 	call	0x8b0	; 0x8b0 <i2c_readNak>
 2d0:	89 87       	std	Y+9, r24	; 0x09
 2d2:	0e 94 32 04 	call	0x864	; 0x864 <i2c_stop>
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <SPI_Init>:
 2dc:	25 9a       	sbi	0x04, 5	; 4
 2de:	20 9a       	sbi	0x04, 0	; 4
 2e0:	22 9a       	sbi	0x04, 2	; 4
 2e2:	21 9a       	sbi	0x04, 1	; 4
 2e4:	23 98       	cbi	0x04, 3	; 4
 2e6:	8c b5       	in	r24, 0x2c	; 44
 2e8:	80 65       	ori	r24, 0x50	; 80
 2ea:	8c bd       	out	0x2c, r24	; 44
 2ec:	8c b5       	in	r24, 0x2c	; 44
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	8c bd       	out	0x2c, r24	; 44
 2f2:	8c b5       	in	r24, 0x2c	; 44
 2f4:	8d 7f       	andi	r24, 0xFD	; 253
 2f6:	8c bd       	out	0x2c, r24	; 44
 2f8:	8d b5       	in	r24, 0x2d	; 45
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	8d bd       	out	0x2d, r24	; 45
 2fe:	28 9a       	sbi	0x05, 0	; 5
 300:	2d 98       	cbi	0x05, 5	; 5
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	9e e4       	ldi	r25, 0x4E	; 78
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <SPI_Init+0x2a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <SPI_Init+0x30>
 30c:	00 00       	nop
 30e:	08 95       	ret

00000310 <SPI_Tranceiver>:
 310:	8e bd       	out	0x2e, r24	; 46
 312:	0d b4       	in	r0, 0x2d	; 45
 314:	07 fe       	sbrs	r0, 7
 316:	fd cf       	rjmp	.-6      	; 0x312 <SPI_Tranceiver+0x2>
 318:	8e b5       	in	r24, 0x2e	; 46
 31a:	08 95       	ret

0000031c <SPI_Read_Byte>:
 31c:	9a e1       	ldi	r25, 0x1A	; 26
 31e:	9a 95       	dec	r25
 320:	f1 f7       	brne	.-4      	; 0x31e <SPI_Read_Byte+0x2>
 322:	00 c0       	rjmp	.+0      	; 0x324 <SPI_Read_Byte+0x8>
 324:	28 98       	cbi	0x05, 0	; 5
 326:	9a e1       	ldi	r25, 0x1A	; 26
 328:	9a 95       	dec	r25
 32a:	f1 f7       	brne	.-4      	; 0x328 <SPI_Read_Byte+0xc>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <SPI_Read_Byte+0x12>
 32e:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 332:	8a e1       	ldi	r24, 0x1A	; 26
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <SPI_Read_Byte+0x18>
 338:	00 c0       	rjmp	.+0      	; 0x33a <SPI_Read_Byte+0x1e>
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 340:	9a e1       	ldi	r25, 0x1A	; 26
 342:	9a 95       	dec	r25
 344:	f1 f7       	brne	.-4      	; 0x342 <SPI_Read_Byte+0x26>
 346:	00 c0       	rjmp	.+0      	; 0x348 <SPI_Read_Byte+0x2c>
 348:	28 9a       	sbi	0x05, 0	; 5
 34a:	08 95       	ret

0000034c <SPI_Write_Byte>:
 34c:	cf 93       	push	r28
 34e:	c6 2f       	mov	r28, r22
 350:	9a e1       	ldi	r25, 0x1A	; 26
 352:	9a 95       	dec	r25
 354:	f1 f7       	brne	.-4      	; 0x352 <SPI_Write_Byte+0x6>
 356:	00 c0       	rjmp	.+0      	; 0x358 <SPI_Write_Byte+0xc>
 358:	28 98       	cbi	0x05, 0	; 5
 35a:	9a e1       	ldi	r25, 0x1A	; 26
 35c:	9a 95       	dec	r25
 35e:	f1 f7       	brne	.-4      	; 0x35c <SPI_Write_Byte+0x10>
 360:	00 c0       	rjmp	.+0      	; 0x362 <SPI_Write_Byte+0x16>
 362:	80 5e       	subi	r24, 0xE0	; 224
 364:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 368:	8a e1       	ldi	r24, 0x1A	; 26
 36a:	8a 95       	dec	r24
 36c:	f1 f7       	brne	.-4      	; 0x36a <SPI_Write_Byte+0x1e>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <SPI_Write_Byte+0x24>
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 376:	9a e1       	ldi	r25, 0x1A	; 26
 378:	9a 95       	dec	r25
 37a:	f1 f7       	brne	.-4      	; 0x378 <SPI_Write_Byte+0x2c>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <SPI_Write_Byte+0x32>
 37e:	28 9a       	sbi	0x05, 0	; 5
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <nRF_Set_Addr_RX>:
 384:	0f 93       	push	r16
 386:	1f 93       	push	r17
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	06 2f       	mov	r16, r22
 38e:	8a e1       	ldi	r24, 0x1A	; 26
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <nRF_Set_Addr_RX+0xc>
 394:	00 c0       	rjmp	.+0      	; 0x396 <nRF_Set_Addr_RX+0x12>
 396:	28 98       	cbi	0x05, 0	; 5
 398:	8a e1       	ldi	r24, 0x1A	; 26
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <nRF_Set_Addr_RX+0x16>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <nRF_Set_Addr_RX+0x1c>
 3a0:	8a e2       	ldi	r24, 0x2A	; 42
 3a2:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 3a6:	00 23       	and	r16, r16
 3a8:	81 f0       	breq	.+32     	; 0x3ca <nRF_Set_Addr_RX+0x46>
 3aa:	c5 e0       	ldi	r28, 0x05	; 5
 3ac:	d1 e0       	ldi	r29, 0x01	; 1
 3ae:	01 50       	subi	r16, 0x01	; 1
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	0a 5f       	subi	r16, 0xFA	; 250
 3b4:	1e 4f       	sbci	r17, 0xFE	; 254
 3b6:	8a e1       	ldi	r24, 0x1A	; 26
 3b8:	8a 95       	dec	r24
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <nRF_Set_Addr_RX+0x34>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <nRF_Set_Addr_RX+0x3a>
 3be:	89 91       	ld	r24, Y+
 3c0:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 3c4:	c0 17       	cp	r28, r16
 3c6:	d1 07       	cpc	r29, r17
 3c8:	b1 f7       	brne	.-20     	; 0x3b6 <nRF_Set_Addr_RX+0x32>
 3ca:	8a e1       	ldi	r24, 0x1A	; 26
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <nRF_Set_Addr_RX+0x48>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <nRF_Set_Addr_RX+0x4e>
 3d2:	28 9a       	sbi	0x05, 0	; 5
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <nRF_Set_Addr_TX>:
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	06 2f       	mov	r16, r22
 3e8:	8a e1       	ldi	r24, 0x1A	; 26
 3ea:	8a 95       	dec	r24
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <nRF_Set_Addr_TX+0xc>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <nRF_Set_Addr_TX+0x12>
 3f0:	28 98       	cbi	0x05, 0	; 5
 3f2:	8a e1       	ldi	r24, 0x1A	; 26
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <nRF_Set_Addr_TX+0x16>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <nRF_Set_Addr_TX+0x1c>
 3fa:	80 e3       	ldi	r24, 0x30	; 48
 3fc:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 400:	00 23       	and	r16, r16
 402:	81 f0       	breq	.+32     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 404:	c0 e0       	ldi	r28, 0x00	; 0
 406:	d1 e0       	ldi	r29, 0x01	; 1
 408:	01 50       	subi	r16, 0x01	; 1
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	0f 5f       	subi	r16, 0xFF	; 255
 40e:	1e 4f       	sbci	r17, 0xFE	; 254
 410:	8a e1       	ldi	r24, 0x1A	; 26
 412:	8a 95       	dec	r24
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	89 91       	ld	r24, Y+
 41a:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 41e:	c0 17       	cp	r28, r16
 420:	d1 07       	cpc	r29, r17
 422:	b1 f7       	brne	.-20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 424:	8a e1       	ldi	r24, 0x1A	; 26
 426:	8a 95       	dec	r24
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	28 9a       	sbi	0x05, 0	; 5
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <nRF_Flush_TX>:
 438:	8a e1       	ldi	r24, 0x1A	; 26
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <nRF_Flush_TX+0x2>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <nRF_Flush_TX+0x8>
 440:	28 98       	cbi	0x05, 0	; 5
 442:	8a e1       	ldi	r24, 0x1A	; 26
 444:	8a 95       	dec	r24
 446:	f1 f7       	brne	.-4      	; 0x444 <nRF_Flush_TX+0xc>
 448:	00 c0       	rjmp	.+0      	; 0x44a <nRF_Flush_TX+0x12>
 44a:	81 ee       	ldi	r24, 0xE1	; 225
 44c:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 450:	8a e1       	ldi	r24, 0x1A	; 26
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <nRF_Flush_TX+0x1a>
 456:	00 c0       	rjmp	.+0      	; 0x458 <nRF_Flush_TX+0x20>
 458:	28 9a       	sbi	0x05, 0	; 5
 45a:	8a e1       	ldi	r24, 0x1A	; 26
 45c:	8a 95       	dec	r24
 45e:	f1 f7       	brne	.-4      	; 0x45c <nRF_Flush_TX+0x24>
 460:	00 c0       	rjmp	.+0      	; 0x462 <nRF_Flush_TX+0x2a>
 462:	08 95       	ret

00000464 <nRF_TX_Mode>:
 464:	2d 98       	cbi	0x05, 5	; 5
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Read_Byte>
 46c:	68 2f       	mov	r22, r24
 46e:	6e 7f       	andi	r22, 0xFE	; 254
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Read_Byte>
 47c:	68 2f       	mov	r22, r24
 47e:	62 60       	ori	r22, 0x02	; 2
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 486:	0e 94 1c 02 	call	0x438	; 0x438 <nRF_Flush_TX>
 48a:	60 e7       	ldi	r22, 0x70	; 112
 48c:	87 e0       	ldi	r24, 0x07	; 7
 48e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Read_Byte>
 498:	68 2f       	mov	r22, r24
 49a:	60 63       	ori	r22, 0x30	; 48
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 4a2:	8b e2       	ldi	r24, 0x2B	; 43
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <nRF_TX_Mode+0x42>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <nRF_TX_Mode+0x48>
 4ac:	00 00       	nop
 4ae:	08 95       	ret

000004b0 <nRF_Flush_RX>:
 4b0:	8a e1       	ldi	r24, 0x1A	; 26
 4b2:	8a 95       	dec	r24
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <nRF_Flush_RX+0x2>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <nRF_Flush_RX+0x8>
 4b8:	28 98       	cbi	0x05, 0	; 5
 4ba:	8a e1       	ldi	r24, 0x1A	; 26
 4bc:	8a 95       	dec	r24
 4be:	f1 f7       	brne	.-4      	; 0x4bc <nRF_Flush_RX+0xc>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <nRF_Flush_RX+0x12>
 4c2:	82 ee       	ldi	r24, 0xE2	; 226
 4c4:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 4c8:	8a e1       	ldi	r24, 0x1A	; 26
 4ca:	8a 95       	dec	r24
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <nRF_Flush_RX+0x1a>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <nRF_Flush_RX+0x20>
 4d0:	28 9a       	sbi	0x05, 0	; 5
 4d2:	8a e1       	ldi	r24, 0x1A	; 26
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <nRF_Flush_RX+0x24>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <nRF_Flush_RX+0x2a>
 4da:	08 95       	ret

000004dc <nRF_RX_Mode>:
 4dc:	2d 98       	cbi	0x05, 5	; 5
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Read_Byte>
 4e4:	68 2f       	mov	r22, r24
 4e6:	63 60       	ori	r22, 0x03	; 3
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 4ee:	0e 94 58 02 	call	0x4b0	; 0x4b0 <nRF_Flush_RX>
 4f2:	60 e7       	ldi	r22, 0x70	; 112
 4f4:	87 e0       	ldi	r24, 0x07	; 7
 4f6:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 8e 01 	call	0x31c	; 0x31c <SPI_Read_Byte>
 500:	68 2f       	mov	r22, r24
 502:	60 63       	ori	r22, 0x30	; 48
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 50a:	2d 9a       	sbi	0x05, 5	; 5
 50c:	8b e2       	ldi	r24, 0x2B	; 43
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <nRF_RX_Mode+0x34>
 514:	00 c0       	rjmp	.+0      	; 0x516 <nRF_RX_Mode+0x3a>
 516:	00 00       	nop
 518:	08 95       	ret

0000051a <nRF_Init>:
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 52a:	63 e0       	ldi	r22, 0x03	; 3
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 532:	69 e6       	ldi	r22, 0x69	; 105
 534:	85 e0       	ldi	r24, 0x05	; 5
 536:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 53a:	66 e2       	ldi	r22, 0x26	; 38
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 542:	65 e0       	ldi	r22, 0x05	; 5
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 c2 01 	call	0x384	; 0x384 <nRF_Set_Addr_RX>
 54c:	65 e0       	ldi	r22, 0x05	; 5
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 ef 01 	call	0x3de	; 0x3de <nRF_Set_Addr_TX>
 556:	6a e0       	ldi	r22, 0x0A	; 10
 558:	81 e1       	ldi	r24, 0x11	; 17
 55a:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 566:	0e 94 6e 02 	call	0x4dc	; 0x4dc <nRF_RX_Mode>
 56a:	8f e1       	ldi	r24, 0x1F	; 31
 56c:	9e e4       	ldi	r25, 0x4E	; 78
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <nRF_Init+0x54>
 572:	00 c0       	rjmp	.+0      	; 0x574 <nRF_Init+0x5a>
 574:	00 00       	nop
 576:	08 95       	ret

00000578 <nRF_send_Payload>:
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	66 23       	and	r22, r22
 582:	69 f0       	breq	.+26     	; 0x59e <nRF_send_Payload+0x26>
 584:	ca e1       	ldi	r28, 0x1A	; 26
 586:	d1 e0       	ldi	r29, 0x01	; 1
 588:	61 50       	subi	r22, 0x01	; 1
 58a:	06 2f       	mov	r16, r22
 58c:	10 e0       	ldi	r17, 0x00	; 0
 58e:	05 5e       	subi	r16, 0xE5	; 229
 590:	1e 4f       	sbci	r17, 0xFE	; 254
 592:	89 91       	ld	r24, Y+
 594:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 598:	c0 17       	cp	r28, r16
 59a:	d1 07       	cpc	r29, r17
 59c:	d1 f7       	brne	.-12     	; 0x592 <nRF_send_Payload+0x1a>
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	08 95       	ret

000005a8 <nRF_TX_Data>:
 5a8:	0e 94 1c 02 	call	0x438	; 0x438 <nRF_Flush_TX>
 5ac:	28 98       	cbi	0x05, 0	; 5
 5ae:	8a e1       	ldi	r24, 0x1A	; 26
 5b0:	8a 95       	dec	r24
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <nRF_TX_Data+0x8>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <nRF_TX_Data+0xe>
 5b6:	80 ea       	ldi	r24, 0xA0	; 160
 5b8:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 5bc:	8a e1       	ldi	r24, 0x1A	; 26
 5be:	8a 95       	dec	r24
 5c0:	f1 f7       	brne	.-4      	; 0x5be <nRF_TX_Data+0x16>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <nRF_TX_Data+0x1c>
 5c4:	6a e0       	ldi	r22, 0x0A	; 10
 5c6:	8a e1       	ldi	r24, 0x1A	; 26
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	0e 94 bc 02 	call	0x578	; 0x578 <nRF_send_Payload>
 5ce:	8a e1       	ldi	r24, 0x1A	; 26
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <nRF_TX_Data+0x28>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <nRF_TX_Data+0x2e>
 5d6:	28 9a       	sbi	0x05, 0	; 5
 5d8:	8a e1       	ldi	r24, 0x1A	; 26
 5da:	8a 95       	dec	r24
 5dc:	f1 f7       	brne	.-4      	; 0x5da <nRF_TX_Data+0x32>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <nRF_TX_Data+0x38>
 5e0:	2d 9a       	sbi	0x05, 5	; 5
 5e2:	8a e1       	ldi	r24, 0x1A	; 26
 5e4:	8a 95       	dec	r24
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <nRF_TX_Data+0x3c>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <nRF_TX_Data+0x42>
 5ea:	2d 98       	cbi	0x05, 5	; 5
 5ec:	08 95       	ret

000005ee <nRF_get_Status>:
 5ee:	28 98       	cbi	0x05, 0	; 5
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 5f6:	28 9a       	sbi	0x05, 0	; 5
 5f8:	08 95       	ret

000005fa <nRF_is_Sending>:
 5fa:	0e 94 f7 02 	call	0x5ee	; 0x5ee <nRF_get_Status>
 5fe:	98 2f       	mov	r25, r24
 600:	90 73       	andi	r25, 0x30	; 48
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	09 f0       	breq	.+2      	; 0x608 <nRF_is_Sending+0xe>
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	08 95       	ret

0000060a <INT6_Init>:

void INT6_Init(void)
{
	EICRB &= ~(1 << ISC60) | (1 << ISC61);	//INT6 active when low
 60a:	ea e6       	ldi	r30, 0x6A	; 106
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	8f 7e       	andi	r24, 0xEF	; 239
 612:	80 83       	st	Z, r24
	EIMSK |= (1 << INT6);			//Enable INT6
 614:	ee 9a       	sbi	0x1d, 6	; 29
	sei();					//Enable global interrupts
 616:	78 94       	sei
 618:	08 95       	ret

0000061a <nRF_get_Payload>:
	SPI_Write_Byte(STATUS, (1 << RX_DR));
}

//Send and receive multiple bytes over SPI
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
 61a:	cf 92       	push	r12
 61c:	df 92       	push	r13
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
	uint8_t i;

	for(i=0; i<len; i++)
 62a:	44 23       	and	r20, r20
 62c:	01 f1       	breq	.+64     	; 0x66e <nRF_get_Payload+0x54>
 62e:	08 2f       	mov	r16, r24
 630:	19 2f       	mov	r17, r25
 632:	eb 01       	movw	r28, r22
 634:	41 50       	subi	r20, 0x01	; 1
 636:	e4 2e       	mov	r14, r20
 638:	f1 2c       	mov	r15, r1
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	e8 1a       	sub	r14, r24
 63e:	f8 0a       	sbc	r15, r24
 640:	e6 0e       	add	r14, r22
 642:	f7 1e       	adc	r15, r23
	{
		data_in[i] = SPI_Tranceiver(data_out[i]);
 644:	f8 01       	movw	r30, r16
 646:	81 91       	ld	r24, Z+
 648:	8f 01       	movw	r16, r30
 64a:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 64e:	6e 01       	movw	r12, r28
 650:	89 93       	st	Y+, r24
		UART_Tx(data_in[i]);
 652:	0e 94 c1 00 	call	0x182	; 0x182 <UART_Tx>
		if (data_in[i] == 0xAA)
 656:	f6 01       	movw	r30, r12
 658:	80 81       	ld	r24, Z
 65a:	8a 3a       	cpi	r24, 0xAA	; 170
 65c:	29 f4       	brne	.+10     	; 0x668 <nRF_get_Payload+0x4e>
		{
			RX_Payload_cnt++;
 65e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <RX_Payload_cnt>
 662:	8f 5f       	subi	r24, 0xFF	; 255
 664:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RX_Payload_cnt>
//Send and receive multiple bytes over SPI
void nRF_get_Payload(uint8_t *data_out, uint8_t *data_in, uint8_t len)
{
	uint8_t i;

	for(i=0; i<len; i++)
 668:	ce 15       	cp	r28, r14
 66a:	df 05       	cpc	r29, r15
 66c:	59 f7       	brne	.-42     	; 0x644 <nRF_get_Payload+0x2a>
		if (data_in[i] == 0xAA)
		{
			RX_Payload_cnt++;
		}
	}
}
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	08 95       	ret

00000680 <__vector_7>:
	EIMSK |= (1 << INT6);			//Enable INT6
	sei();					//Enable global interrupts
}

ISR(INT6_vect)
{
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	5f 93       	push	r21
 692:	6f 93       	push	r22
 694:	7f 93       	push	r23
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
	cli();					//Disable global interrupt
 6a2:	f8 94       	cli

	PORTB &= ~_BV(CE); 			//Stop listening
 6a4:	2d 98       	cbi	0x05, 5	; 5
	// Pull down chip select
	PORTB &= ~_BV(CSN); //CSN low
 6a6:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a8:	8a e1       	ldi	r24, 0x1A	; 26
 6aa:	8a 95       	dec	r24
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <__vector_7+0x2a>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <__vector_7+0x30>
	_delay_us(10);
	// Send command to read RX payload
	SPI_Tranceiver(R_RX_PAYLOAD);
 6b0:	81 e6       	ldi	r24, 0x61	; 97
 6b2:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Tranceiver>
 6b6:	8a e1       	ldi	r24, 0x1A	; 26
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <__vector_7+0x38>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <__vector_7+0x3e>
	_delay_us(10);
	// Read payload
	nRF_get_Payload(N2_payload_RX, N2_payload_RX, PAYLOAD_LEN);
 6be:	4a e0       	ldi	r20, 0x0A	; 10
 6c0:	66 e2       	ldi	r22, 0x26	; 38
 6c2:	71 e0       	ldi	r23, 0x01	; 1
 6c4:	cb 01       	movw	r24, r22
 6c6:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF_get_Payload>
 6ca:	8a e1       	ldi	r24, 0x1A	; 26
 6cc:	8a 95       	dec	r24
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <__vector_7+0x4c>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <__vector_7+0x52>
	_delay_us(10);
	// Pull up chip select
	PORTB |= _BV(CSN);  //CSN high
 6d2:	28 9a       	sbi	0x05, 0	; 5
 6d4:	8a e1       	ldi	r24, 0x1A	; 26
 6d6:	8a 95       	dec	r24
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <__vector_7+0x56>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <__vector_7+0x5c>
	_delay_us(10);
	// Reset status register
	SPI_Write_Byte(STATUS, (1 << RX_DR));
 6dc:	60 e4       	ldi	r22, 0x40	; 64
 6de:	87 e0       	ldi	r24, 0x07	; 7
 6e0:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
}
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	0f 90       	pop	r0
 702:	1f 90       	pop	r1
 704:	18 95       	reti

00000706 <nRF_Reset>:
 706:	8a e1       	ldi	r24, 0x1A	; 26
 708:	8a 95       	dec	r24
 70a:	f1 f7       	brne	.-4      	; 0x708 <nRF_Reset+0x2>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <nRF_Reset+0x8>

void nRF_Reset(void)
{
	_delay_us(10);
	//Reset IRQ-flags in status register
	SPI_Write_Byte(STATUS, 0x70);
 70e:	60 e7       	ldi	r22, 0x70	; 112
 710:	87 e0       	ldi	r24, 0x07	; 7
 712:	0e 94 a6 01 	call	0x34c	; 0x34c <SPI_Write_Byte>
 716:	8a e1       	ldi	r24, 0x1A	; 26
 718:	8a 95       	dec	r24
 71a:	f1 f7       	brne	.-4      	; 0x718 <nRF_Reset+0x12>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <nRF_Reset+0x18>
 71e:	08 95       	ret

00000720 <main>:
** - Contains an endless loop
** - Sets the BNO055 in NDOF mode and fetches the quaternion data
*************************************************************************************/
int main(void)
{
	AVR_Init();
 720:	0e 94 75 00 	call	0xea	; 0xea <AVR_Init>
	i2c_init();
 724:	0e 94 da 03 	call	0x7b4	; 0x7b4 <i2c_init>
	UART_Init();
 728:	0e 94 ab 00 	call	0x156	; 0x156 <UART_Init>
	SPI_Init();
 72c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <SPI_Init>
	nRF_Init();
 730:	0e 94 8d 02 	call	0x51a	; 0x51a <nRF_Init>
	INT6_Init();
 734:	0e 94 05 03 	call	0x60a	; 0x60a <INT6_Init>
	BNO_Init();
 738:	0e 94 03 01 	call	0x206	; 0x206 <BNO_Init>

	//Initialize the received payload count
	RX_Payload_cnt = 0;
 73c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RX_Payload_cnt>
	
	//Set node and IMU i.d.
	N2_payload_TX[0] = NODE_ID;
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>

	//Initialize the sensor count
	Sensor_cnt = 1;
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Sensor_cnt>

	nRF_Flush_RX();
 74c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <nRF_Flush_RX>
	nRF_Reset();
 750:	0e 94 83 03 	call	0x706	; 0x706 <nRF_Reset>
	PORTB |= _BV(CE);			//Start listening
 754:	2d 9a       	sbi	0x05, 5	; 5
			
			//Select IMU
			BNO_MUX_Select(Sensor_cnt);
			
			//Set IMU i.d.
			N2_payload_TX[1] = Sensor_cnt;
 756:	ca e1       	ldi	r28, 0x1A	; 26
 758:	d1 e0       	ldi	r29, 0x01	; 1
			//Increment the sensor count
			Sensor_cnt++;
			
			if(Sensor_cnt > MAX_IMU_COUNT)
			{
				Sensor_cnt = 1;
 75a:	11 e0       	ldi	r17, 0x01	; 1
	PORTB |= _BV(CE);			//Start listening

	//Endless Loop
	while(1)
	{
		if (RX_Payload_cnt == PAYLOAD_LEN)
 75c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <RX_Payload_cnt>
 760:	8a 30       	cpi	r24, 0x0A	; 10
 762:	e1 f7       	brne	.-8      	; 0x75c <main+0x3c>
		{
			RX_Payload_cnt = 0;
 764:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RX_Payload_cnt>

			//Configure as Transmitter
			nRF_TX_Mode();
 768:	0e 94 32 02 	call	0x464	; 0x464 <nRF_TX_Mode>
			
			//Select IMU
			BNO_MUX_Select(Sensor_cnt);
 76c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Sensor_cnt>
 770:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <BNO_MUX_Select>
			
			//Set IMU i.d.
			N2_payload_TX[1] = Sensor_cnt;
 774:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Sensor_cnt>
 778:	89 83       	std	Y+1, r24	; 0x01
			
			BNO_Read_Quaternions();
 77a:	0e 94 44 01 	call	0x288	; 0x288 <BNO_Read_Quaternions>

			nRF_TX_Data(N2_payload_TX);
 77e:	ce 01       	movw	r24, r28
 780:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <nRF_TX_Data>
			while(nRF_is_Sending());
 784:	0e 94 fd 02 	call	0x5fa	; 0x5fa <nRF_is_Sending>
 788:	81 11       	cpse	r24, r1
 78a:	fc cf       	rjmp	.-8      	; 0x784 <main+0x64>
			
			//Increment the sensor count
			Sensor_cnt++;
 78c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Sensor_cnt>
 790:	8f 5f       	subi	r24, 0xFF	; 255
 792:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Sensor_cnt>
			
			if(Sensor_cnt > MAX_IMU_COUNT)
 796:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Sensor_cnt>
 79a:	87 30       	cpi	r24, 0x07	; 7
 79c:	14 f0       	brlt	.+4      	; 0x7a2 <main+0x82>
			{
				Sensor_cnt = 1;
 79e:	10 93 25 01 	sts	0x0125, r17	; 0x800125 <Sensor_cnt>
			}

			//Configure as Receiver
			nRF_RX_Mode();
 7a2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <nRF_RX_Mode>
			nRF_Flush_RX();
 7a6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <nRF_Flush_RX>
			nRF_Reset();
 7aa:	0e 94 83 03 	call	0x706	; 0x706 <nRF_Reset>
			PORTB |= _BV(CE);	//Start listening again
 7ae:	2d 9a       	sbi	0x05, 5	; 5
			sei();
 7b0:	78 94       	sei
 7b2:	d4 cf       	rjmp	.-88     	; 0x75c <main+0x3c>

000007b4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 7b4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 7b8:	8c e0       	ldi	r24, 0x0C	; 12
 7ba:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 7be:	08 95       	ret

000007c0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 7c0:	94 ea       	ldi	r25, 0xA4	; 164
 7c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 7c6:	ec eb       	ldi	r30, 0xBC	; 188
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	90 81       	ld	r25, Z
 7cc:	99 23       	and	r25, r25
 7ce:	ec f7       	brge	.-6      	; 0x7ca <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 7d0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 7d4:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 7d6:	98 30       	cpi	r25, 0x08	; 8
 7d8:	11 f0       	breq	.+4      	; 0x7de <i2c_start+0x1e>
 7da:	90 31       	cpi	r25, 0x10	; 16
 7dc:	a1 f4       	brne	.+40     	; 0x806 <i2c_start+0x46>

	// send device address
	TWDR = address;
 7de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 7e2:	84 e8       	ldi	r24, 0x84	; 132
 7e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 7e8:	ec eb       	ldi	r30, 0xBC	; 188
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	88 23       	and	r24, r24
 7f0:	ec f7       	brge	.-6      	; 0x7ec <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 7f2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 7f6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 7f8:	98 31       	cpi	r25, 0x18	; 24
 7fa:	39 f0       	breq	.+14     	; 0x80a <i2c_start+0x4a>
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 34       	cpi	r25, 0x40	; 64
 800:	29 f4       	brne	.+10     	; 0x80c <i2c_start+0x4c>
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	08 95       	ret
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
 80a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 80c:	08 95       	ret

0000080e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 812:	ec eb       	ldi	r30, 0xBC	; 188
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	24 ea       	ldi	r18, 0xA4	; 164
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 818:	a9 eb       	ldi	r26, 0xB9	; 185
 81a:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
 81c:	cb eb       	ldi	r28, 0xBB	; 187
 81e:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
 820:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 822:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 824:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 826:	90 81       	ld	r25, Z
 828:	99 23       	and	r25, r25
 82a:	ec f7       	brge	.-6      	; 0x826 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 82c:	9c 91       	ld	r25, X
 82e:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 830:	98 30       	cpi	r25, 0x08	; 8
 832:	11 f0       	breq	.+4      	; 0x838 <i2c_start_wait+0x2a>
 834:	90 31       	cpi	r25, 0x10	; 16
 836:	b1 f7       	brne	.-20     	; 0x824 <i2c_start_wait+0x16>
    
    	// send device address
    	TWDR = address;
 838:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 83a:	30 83       	st	Z, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 83c:	90 81       	ld	r25, Z
 83e:	99 23       	and	r25, r25
 840:	ec f7       	brge	.-6      	; 0x83c <i2c_start_wait+0x2e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 842:	9c 91       	ld	r25, X
 844:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 846:	90 32       	cpi	r25, 0x20	; 32
 848:	11 f0       	breq	.+4      	; 0x84e <i2c_start_wait+0x40>
 84a:	98 35       	cpi	r25, 0x58	; 88
 84c:	29 f4       	brne	.+10     	; 0x858 <i2c_start_wait+0x4a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 84e:	40 83       	st	Z, r20
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 850:	90 81       	ld	r25, Z
 852:	94 fd       	sbrc	r25, 4
 854:	fd cf       	rjmp	.-6      	; 0x850 <i2c_start_wait+0x42>
 856:	e6 cf       	rjmp	.-52     	; 0x824 <i2c_start_wait+0x16>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 85e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <i2c_start>

}/* i2c_rep_start */
 862:	08 95       	ret

00000864 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 864:	84 e9       	ldi	r24, 0x94	; 148
 866:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 86a:	ec eb       	ldi	r30, 0xBC	; 188
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	84 fd       	sbrc	r24, 4
 872:	fd cf       	rjmp	.-6      	; 0x86e <i2c_stop+0xa>

}/* i2c_stop */
 874:	08 95       	ret

00000876 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 876:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 87a:	84 e8       	ldi	r24, 0x84	; 132
 87c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 880:	ec eb       	ldi	r30, 0xBC	; 188
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	88 23       	and	r24, r24
 888:	ec f7       	brge	.-6      	; 0x884 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 88a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 88e:	98 7f       	andi	r25, 0xF8	; 248
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	98 32       	cpi	r25, 0x28	; 40
 894:	09 f4       	brne	.+2      	; 0x898 <i2c_write+0x22>
 896:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 898:	08 95       	ret

0000089a <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 89a:	84 ec       	ldi	r24, 0xC4	; 196
 89c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
 8a0:	ec eb       	ldi	r30, 0xBC	; 188
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	88 23       	and	r24, r24
 8a8:	ec f7       	brge	.-6      	; 0x8a4 <i2c_readAck+0xa>

    return TWDR;
 8aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
 8ae:	08 95       	ret

000008b0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 8b0:	84 e8       	ldi	r24, 0x84	; 132
 8b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 8b6:	ec eb       	ldi	r30, 0xBC	; 188
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	88 23       	and	r24, r24
 8be:	ec f7       	brge	.-6      	; 0x8ba <i2c_readNak+0xa>
	
    return TWDR;
 8c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 8c4:	08 95       	ret

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
